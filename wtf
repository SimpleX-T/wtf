#!/bin/bash

VERSION="1.0.0"

# ──────────────────────────────────────────────
# wtf — Write To File utility
# v$VERSION
# Author: devtochukwu (2025)
# https://github.com/SimpleX-T/wtf
# ──────────────────────────────────────────────

set -e

show_help() {
  cat <<EOF
wtf - Write To File utility (v$VERSION)

Usage:
  wtf [directory] <filename> [-o|--overwrite] ["content"]
  wtf <filename> [-o] <<EOF
  wtf <filename> [-o] < file.txt

Options:
  -o, --overwrite     Overwrite the file instead of appending (default is append)
  -h, --help          Show this help screen
  -v, --version       Show tool version

Examples:
  wtf .env "NODE_ENV=development"
  wtf .env --overwrite "RESET=true"
  wtf ./config settings.json -o '{"debug":true}'
  wtf app.env <<EOF
  API_KEY=abc
  TOKEN=xyz
  EOF

⚠️  Quoting Variables:
To write literal variables (e.g. \$TOKEN or \$SECRET), wrap content in single quotes:
  wtf .env 'API_KEY=\$MY_KEY'

See full docs at: https://github.com/SimpleX-T/wtf
EOF
}

# --- Version ---
if [[ "$1" == "--version" || "$1" == "-v" ]]; then
  echo "wtf version $VERSION"
  exit 0
fi

# --- Help ---
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  show_help
  exit 0
fi

# Default values
LOCATION="."
OVERWRITE=false
CONTENT_FROM_ARG=""

# Parse location and filename
if [[ "$1" == "." || -d "$1" ]]; then
  LOCATION="$1"
  FILENAME="$2"
  shift 2
else
  FILENAME="$1"
  shift 1
fi

# Validate filename
if [[ -z "$FILENAME" ]]; then
  echo "❌ Error: No filename provided."
  echo "Run \`wtf --help\` for usage."
  exit 1
fi

# Parse overwrite flag
if [[ "$1" == "-o" || "$1" == "--overwrite" ]]; then
  OVERWRITE=true
  shift 1
fi

# Optional string content
CONTENT_FROM_ARG="$1"

# Construct full path
FILE="$LOCATION/$FILENAME"

# Prevent writing to a directory
if [[ -d "$FILE" ]]; then
  echo "❌ Error: $FILE is a directory. Cannot write."
  exit 3
fi

# Create directory if needed
if ! mkdir -p "$LOCATION" 2>/dev/null; then
  echo "❌ Error: Cannot create directory $LOCATION. Check permissions."
  exit 2
fi

# If string input is provided
if [[ -n "$CONTENT_FROM_ARG" ]]; then
  if $OVERWRITE; then
    echo "$CONTENT_FROM_ARG" > "$FILE"
  else
    echo "$CONTENT_FROM_ARG" >> "$FILE"
  fi
  echo "✅ Content written to: $FILE"
  exit 0
fi

# If no piped or here-doc input
if [ -t 0 ]; then
  echo "⚠️  No input detected. Provide a string, heredoc (<<EOF), or pipe content in."
  exit 1
fi

# Read from stdin
if $OVERWRITE; then
  cat > "$FILE"
else
  cat >> "$FILE"
fi

echo "✅ Content written to: $FILE"
